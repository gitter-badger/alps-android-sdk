package io.matchmore.sdk;

import io.matchmore.CollectionFormats.*;



import retrofit2.Call;
import retrofit2.http.*;

import okhttp3.RequestBody;

import io.matchmore.sdk.models.APIError;
import io.matchmore.sdk.models.Device;
import io.matchmore.sdk.models.IBeaconTriples;
import io.matchmore.sdk.models.Location;
import io.matchmore.sdk.models.Matches;
import io.matchmore.sdk.models.ProximityEvent;
import io.matchmore.sdk.models.Publication;
import io.matchmore.sdk.models.Publications;
import io.matchmore.sdk.models.Subscription;
import io.matchmore.sdk.models.Subscriptions;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public interface DeviceApi {
  /**
   * Create a device
   * 
   * @param device The device to be created. (required)
   * @return Call&lt;Device&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @POST("devices")
  Call<Device> createDevice(
    @retrofit2.http.Body Device device
  );

  /**
   * Create a new location for a device
   * 
   * @param deviceId The id (UUID) of the device. (required)
   * @param location Location to create for a device.  (required)
   * @return Call&lt;Location&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @POST("devices/{deviceId}/locations")
  Call<Location> createLocation(
    @retrofit2.http.Path("deviceId") String deviceId, @retrofit2.http.Body Location location
  );

  /**
   * Create a publication for a device
   * 
   * @param deviceId The id (UUID) of the device. (required)
   * @param publication Publication to create on a device.  (required)
   * @return Call&lt;Publication&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @POST("devices/{deviceId}/publications")
  Call<Publication> createPublication(
    @retrofit2.http.Path("deviceId") String deviceId, @retrofit2.http.Body Publication publication
  );

  /**
   * Create a subscription for a device
   * 
   * @param deviceId The id (UUID) of the device.  (required)
   * @param subscription Subscription to create on a device.  (required)
   * @return Call&lt;Subscription&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @POST("devices/{deviceId}/subscriptions")
  Call<Subscription> createSubscription(
    @retrofit2.http.Path("deviceId") String deviceId, @retrofit2.http.Body Subscription subscription
  );

  /**
   * Delete an existing device
   * 
   * @param deviceId The id (UUID) of the device. (required)
   * @return Call&lt;Void&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @DELETE("devices/{deviceId}")
  Call<Void> deleteDevice(
    @retrofit2.http.Path("deviceId") String deviceId
  );

  /**
   * Delete a Publication
   * 
   * @param deviceId The id (UUID) of the device. (required)
   * @param publicationId The id (UUID) of the subscription. (required)
   * @return Call&lt;Void&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @DELETE("devices/{deviceId}/publications/{publicationId}")
  Call<Void> deletePublication(
    @retrofit2.http.Path("deviceId") String deviceId, @retrofit2.http.Path("publicationId") String publicationId
  );

  /**
   * Delete a Subscription
   * 
   * @param deviceId The id (UUID) of the device. (required)
   * @param subscriptionId The id (UUID) of the subscription. (required)
   * @return Call&lt;Void&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @DELETE("devices/{deviceId}/subscriptions/{subscriptionId}")
  Call<Void> deleteSubscription(
    @retrofit2.http.Path("deviceId") String deviceId, @retrofit2.http.Path("subscriptionId") String subscriptionId
  );

  /**
   * Info about a device
   * 
   * @param deviceId The id (UUID) of the device. (required)
   * @return Call&lt;Device&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @GET("devices/{deviceId}")
  Call<Device> getDevice(
    @retrofit2.http.Path("deviceId") String deviceId
  );

  /**
   * Get IBeacons triples for all registered devices
   * Keys in map are device UUIDs and values are IBeacon triples. In model you can see example values \&quot;property1\&quot; \&quot;property2\&quot; \&quot;property3\&quot; instead of random UUIDs this is generated by OpenApi document browser
   * @return Call&lt;IBeaconTriples&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @GET("devices/IBeaconTriples")
  Call<IBeaconTriples> getIBeaconTriples();
    

  /**
   * Get matches for the device
   * 
   * @param deviceId The id (UUID) of the device. (required)
   * @return Call&lt;Matches&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @GET("devices/{deviceId}/matches")
  Call<Matches> getMatches(
    @retrofit2.http.Path("deviceId") String deviceId
  );

  /**
   * Info about a publication on a device
   * 
   * @param deviceId The id (UUID) of the device. (required)
   * @param publicationId The id (UUID) of the publication. (required)
   * @return Call&lt;Publication&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @GET("devices/{deviceId}/publications/{publicationId}")
  Call<Publication> getPublication(
    @retrofit2.http.Path("deviceId") String deviceId, @retrofit2.http.Path("publicationId") String publicationId
  );

  /**
   * Get all publications for a device
   * 
   * @param deviceId The id (UUID) of the device. (required)
   * @return Call&lt;Publications&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @GET("devices/{deviceId}/publications")
  Call<Publications> getPublications(
    @retrofit2.http.Path("deviceId") String deviceId
  );

  /**
   * Info about a subscription on a device
   * 
   * @param deviceId The id (UUID) of the device. (required)
   * @param subscriptionId The id (UUID) of the subscription. (required)
   * @return Call&lt;Subscription&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @GET("devices/{deviceId}/subscriptions/{subscriptionId}")
  Call<Subscription> getSubscription(
    @retrofit2.http.Path("deviceId") String deviceId, @retrofit2.http.Path("subscriptionId") String subscriptionId
  );

  /**
   * Get all subscriptions for a device
   * 
   * @param deviceId The id (UUID) of the device. (required)
   * @return Call&lt;Subscriptions&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @GET("devices/{deviceId}/subscriptions")
  Call<Subscriptions> getSubscriptions(
    @retrofit2.http.Path("deviceId") String deviceId
  );

  /**
   * Trigger the proximity event between a device and a ranged BLE iBeacon
   * 
   * @param deviceId The id (UUID) of the device. (required)
   * @param proximityEvent The proximity event to be created for the device. (required)
   * @return Call&lt;ProximityEvent&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @POST("devices/{deviceId}/proximityEvents")
  Call<ProximityEvent> triggerProximityEvents(
    @retrofit2.http.Path("deviceId") String deviceId, @retrofit2.http.Body ProximityEvent proximityEvent
  );

}
